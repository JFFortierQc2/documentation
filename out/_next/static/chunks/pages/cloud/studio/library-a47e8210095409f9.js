(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7911],{2556:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/cloud/studio/library",function(){return n(1706)}])},1706:function(e,t,n){"use strict";n.r(t);var i=n(1527),s=n(452),a=n(6736);n(8027);var r=n(751);function o(e){let t=Object.assign({h1:"h1",p:"p",h2:"h2",ol:"ol",li:"li",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h3:"h3",strong:"strong"},(0,a.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{children:"Library"}),"\n",(0,i.jsx)(t.p,{children:"Part of the Botpress NLU (Natural Language Understanding)"}),"\n",(0,i.jsx)(t.p,{children:"The second tab of the Explorer panel is the Library. Here you will find your global Intents and Entities. In addition to global Intents, Botpress provides Inline Intents that can be defined on a Transition."}),"\n",(0,i.jsx)(t.h2,{id:"intents",children:"Intents"}),"\n",(0,i.jsx)(t.p,{children:"Recognizing the meaning of user messages is essential. It’s critical not only to identify them, but also accurately classify them. To do so, you can program your chatbot to extract information from a natural conversation (i.e. a conversation with a human)."}),"\n",(0,i.jsx)(t.p,{children:"When you create an intent, you also add utterances. Utterances represent the different statements your user can use to say or ask for the same thing."}),"\n",(0,i.jsx)(t.p,{children:"You can also use them as inline intents for transitions."}),"\n",(0,i.jsx)(t.p,{children:"For example, we can add the following utterances to the “Ordering a coffee” intent:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"I want coffee"}),"\n",(0,i.jsx)(t.li,{children:"I'd like some coffee, please"}),"\n",(0,i.jsx)(t.li,{children:"Do you have a decaf espresso?"}),"\n",(0,i.jsx)(t.li,{children:"Hi. I'd like to order a latte, please. Normal, single shot."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"You can add these different utterances to train your chatbot to answer an intent instead of a specific word. The user statements are compared and matched with the most appropriate intent with the highest confidence score."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{align:"left",children:"User Message"}),(0,i.jsx)(t.th,{align:"center",children:"Intent Matched"}),(0,i.jsx)(t.th,{align:"right",children:"Confidence"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{align:"left",children:"I would like to order a coffee."}),(0,i.jsx)(t.td,{align:"center",children:"place-order"}),(0,i.jsx)(t.td,{align:"right",children:"0.97"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{align:"left",children:"An espresso, please"}),(0,i.jsx)(t.td,{align:"center",children:"place-order"}),(0,i.jsx)(t.td,{align:"right",children:"0.91"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{align:"left",children:"Can you please give me a double cappuccino?"}),(0,i.jsx)(t.td,{align:"center",children:"place-order"}),(0,i.jsx)(t.td,{align:"right",children:"0.96"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"adding-an-intent",children:"Adding an Intent"}),"\n",(0,i.jsx)(t.p,{children:"To create a new intent,"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"In your Conversation Studio, click the Library tab from the top left corner."}),"\n",(0,i.jsx)(t.li,{children:"Click the + button."}),"\n",(0,i.jsx)(t.li,{children:"Give it a friendly name."}),"\n",(0,i.jsx)(t.li,{children:"Click Submit."}),"\n",(0,i.jsx)(t.li,{children:"Write your utterances next to the number (where you can see type a sentence)."}),"\n"]}),"\n",(0,i.jsx)(r.UW,{type:"info",children:(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Note"})," ",(0,i.jsx)("br",{}),"\nUtterances currently have a maximum of 280 characters."]})}),"\n",(0,i.jsx)(t.h2,{id:"slots",children:"Slots"}),"\n",(0,i.jsx)(t.p,{children:"Slots are a significant concept in the Botpress NLU. You can think of them as necessary parameters to complete the action associated with an intent."}),"\n",(0,i.jsx)(t.h3,{id:"slot-tagging",children:"Slot Tagging"}),"\n",(0,i.jsx)(t.p,{children:"The Botpress Native NLU will tag each word of user input. Words separated by a hyphen are treated as one word. If the word is correctly identified as a slot, it will be attached to the NLU extraction event. Each identified slot will be accessible in the event.nlu.slots object using its name as the key.\nDefining Slots\nIn your Conversation Studio, click the Library tab from the top left corner.\nSelect the intent you want to add slots too,\nClick Create a Slot.\nLet's use a book_flight intent. To book a flight, we'll define two slots: departure and destination, both associated with the Airport Codes custom list entity. Once that is done, we need to identify every airport slot."}),"\n",(0,i.jsx)(t.h2,{id:"entities",children:"Entities"}),"\n",(0,i.jsx)(t.p,{children:"You can think of Entities as intent parameters. They represent a concept such as a colour, a date, a time, or a weight. Entity extraction helps you extract and normalize desired entities if they are present in a user phrase or message to the chatbot."}),"\n",(0,i.jsx)(t.p,{children:"Example: The place-order intent contains the following entities:\ncaffeine that specifies if the coffee is caffeinated or decaffeinated.\nsize for a single or a double shot.\ndrink that specifies the kind of drink asked.\nAttached to NLU extraction, you will find an entities property which is an array of System and Custom entities."}),"\n",(0,i.jsx)(t.h2,{id:"custom-entities",children:"Custom Entities"}),"\n",(0,i.jsx)(t.p,{children:"Botpress provides two types of custom entities: pattern and list entities. To define a custom entity, go to the Library tab of the Explorer. From there, you can define your custom entities which will be available for any input message treated by your chatbot. Go ahead and click on New entity."}),"\n",(0,i.jsx)(t.h2,{id:"using-entities",children:"Using Entities"}),"\n",(0,i.jsx)(t.p,{children:"You may access and use entity data by looking up the event.nlu.entities variable in your hooks, flow transitions or Execute Code cards."}),"\n",(0,i.jsx)(t.h2,{id:"system-entities",children:"System Entities"}),"\n",(0,i.jsx)(t.p,{children:"The Botpress Native NLU offers several system entities for extraction. It can extract these entities:\nAmount of money\nDistance\nDuration\nEmail\nNumber\nOrdinal\nPhone number\nQuantity\nTemperature\nTime\nURL\nVolume\nExample:\nUser said\nType\nValue\nUnit\nAdd 5 lbs of sugar to my cart\nquantity\n5\npound"}),"\n",(0,i.jsx)(t.h2,{id:"list-entities",children:"List Entities"}),"\n",(0,i.jsx)(t.p,{children:'List extraction behaves similarly to pattern extraction. However, you\'ll be able to add different occurrences of your entity with corresponding synonyms.\nLet\'s take Airport Codes as an example:\nExtraction will go like this:\nUser said\nType\nValue\n"Find a flight from SFO to Mumbai"\n"Airport Codes"\n["SFO", "BOM"]'}),"\n",(0,i.jsx)(t.h2,{id:"pattern-entities",children:"Pattern Entities"}),"\n",(0,i.jsxs)(t.p,{children:["Pattern or Regular Expression Extraction allows you to extract information presented in a format that can be described using Regular Expression (RegEx). Once you've created a pattern entity, Botpress Native NLU will perform a regex extraction on each incoming message and add it to event.nlu.entities.\nExample:\nGiven a Pattern Entity definition with [A-Z]",3,"-[0-9]",4,"-[A-Z]",3," as a pattern:\nExtraction will go like this:\nUser said\nType\nValue\nFind product BHZ-1234-UYT\nSKU\nBHZ-1234-UYT"]}),"\n",(0,i.jsx)(t.h2,{id:"sensitive-information",children:"Sensitive Information"}),"\n",(0,i.jsxs)(t.p,{children:["Messages sent between users and the chatbot are stored in the database, which means that sometimes your chatbot may save personal information (e.g., a credit card number). To protect the chatbot user's confidential information, use the small checkbox located in the upper right corner labeled sensitive when creating such entities.\nWhen checked, your chatbot will still display the information in the chat window, but the sensitive information will be replaced by ",(0,i.jsx)(t.strong,{children:"*"})," before being stored. The original value is still available from event.nlu.entities"]})]})}t.default=(0,s.j)({MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,a.ah)(),e.components);return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(o,{...e})}):o(e)},pageOpts:{filePath:"pages/cloud/studio/library.mdx",route:"/cloud/studio/library",headings:[{depth:1,value:"Library",id:"library"},{depth:2,value:"Intents",id:"intents"},{depth:3,value:"Adding an Intent",id:"adding-an-intent"},{depth:2,value:"Slots",id:"slots"},{depth:3,value:"Slot Tagging",id:"slot-tagging"},{depth:2,value:"Entities",id:"entities"},{depth:2,value:"Custom Entities",id:"custom-entities"},{depth:2,value:"Using Entities",id:"using-entities"},{depth:2,value:"System Entities",id:"system-entities"},{depth:2,value:"List Entities",id:"list-entities"},{depth:2,value:"Pattern Entities",id:"pattern-entities"},{depth:2,value:"Sensitive Information",id:"sensitive-information"}],timestamp:1687979724e3,title:"Library"},pageNextRoute:"/cloud/studio/library"})}},function(e){e.O(0,[452,9774,2888,179],function(){return e(e.s=2556)}),_N_E=e.O()}]);