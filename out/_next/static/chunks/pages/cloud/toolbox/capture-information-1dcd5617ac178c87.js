(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8476],{4875:function(e,t){var s;/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/!function(){"use strict";var r={}.hasOwnProperty;function a(){for(var e=[],t=0;t<arguments.length;t++){var s=arguments[t];if(s){var n=typeof s;if("string"===n||"number"===n)e.push(s);else if(Array.isArray(s)){if(s.length){var i=a.apply(null,s);i&&e.push(i)}}else if("object"===n){if(s.toString!==Object.prototype.toString&&!s.toString.toString().includes("[native code]")){e.push(s.toString());continue}for(var o in s)r.call(s,o)&&s[o]&&e.push(o)}}}return e.join(" ")}e.exports?(a.default=a,e.exports=a):void 0!==(s=(function(){return a}).apply(t,[]))&&(e.exports=s)}()},795:function(e,t,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/cloud/toolbox/capture-information",function(){return s(2621)}])},5196:function(e,t,s){"use strict";s.d(t,{H4:function(){return i},iA:function(){return j},Td:function(){return g},Tr:function(){return b}});var r=s(1527),a=s(4875),n=s.n(a);s(959);let{H4:i,H5:o,H6:l,P:h,Hr:c,A:d,Ol:p,Ul:u,Li:x,Br:m,Img:f,Table:j,Tbody:y,Td:g,Th:v,Thead:w,Tr:b}={H4:e=>(0,r.jsx)("h4",{...e,className:n()("mt-6 text-xl font-bold",e.className)}),H5:e=>(0,r.jsx)("h5",{...e,className:n()("tracking-wide text-zinc-900",e.className)}),H6:e=>(0,r.jsx)("h6",{...e,className:n()("tracking-wide text-zinc-900",e.className)}),P:e=>(0,r.jsx)("p",{...e,className:n()("mb-2 tracking-wide text-zinc-600",e.className)}),Hr:e=>(0,r.jsx)("hr",{className:n()("my-12",e.className)}),A:e=>(0,r.jsx)("a",{...e,className:n()("font-normal text-zinc-600 underline decoration-blue-500 decoration-2 underline-offset-1 hover:text-zinc-900 hover:decoration-4 hover:underline-offset-2",e.className)}),Ol:e=>(0,r.jsx)("ol",{...e,className:n()("mb-4 list-decimal space-y-2 pl-5 tracking-wide text-zinc-600 marker:text-zinc-800",e.className)}),Ul:e=>(0,r.jsx)("ul",{...e,className:n()("mb-4 list-disc space-y-2 pl-5 tracking-wide text-zinc-600 ",e.className)}),Li:e=>(0,r.jsx)("li",{...e,className:n()("text-zinc-600",e.className)}),Br:e=>(0,r.jsx)("br",{...e}),Img:e=>(0,r.jsx)("img",{...e,className:n()("mb-6",e.className)}),Table:e=>(0,r.jsx)("table",{...e,className:n()("w-full border-collapse",e.className)}),Tbody:e=>(0,r.jsx)("tbody",{...e,className:n()("border",e.className)}),Td:e=>(0,r.jsx)("td",{...e,className:n()("block border border-zinc-300 p-2 text-zinc-600 dark:text-gray-200 lg:table-cell",e.className)}),Th:e=>(0,r.jsx)("th",{...e,className:n()("block border border-zinc-300 p-2 lg:table-cell",e.className)}),Thead:e=>(0,r.jsx)("thead",{...e,className:n()("border",e.className)}),Tr:e=>(0,r.jsx)("tr",{...e,className:n()("even:bg-zinc-100 dark:even:bg-gray-600/20",e.className)})}},2621:function(e,t,s){"use strict";s.r(t);var r=s(1527),a=s(452),n=s(6736);s(8027);var i=s(751),o=s(5196);function l(e){let t=Object.assign({h1:"h1",p:"p",img:"img",strong:"strong",h2:"h2",a:"a",h3:"h3",h4:"h4",ol:"ol",li:"li",pre:"pre",code:"code",span:"span",ul:"ul"},(0,n.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{children:'Capture Information"'}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{src:"/docs/content/capture-info-banner.png",alt:"Shortcuts"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Capture Information"})," Card is part of the Toolbox that allows the bot to stop processing and wait for the user's response while capturing a specific piece of information from the user's input."]}),"\n",(0,r.jsx)(t.p,{children:"This could include details like the user's name, full address, or raw input."}),"\n",(0,r.jsx)(t.p,{children:"To collect multiple pieces of information, multiple prompt fields can be added to a single prompt node. Once the information is collected, a flow variable should be created to store the extracted information for later use in the conversation or to be passed on to other systems. This allows for a more personalized and efficient experience for the user, as well as providing valuable data for the chatbot's developers."}),"\n",(0,r.jsx)(t.h2,{id:"prompt-field-types",children:"Prompt Field Types"}),"\n",(0,r.jsx)(t.p,{children:"A Prompt Field is a type of input field that is used to capture information from a user in a structured and organized manner. It can include various types of input fields such as Single Choice, Multiple Choice, Number, Email Address, Phone Number, and more."}),"\n",(0,r.jsx)(t.p,{children:"The Prompt Field also includes validation messages and code validation, which helps ensure that the user inputs the correct type of information. This means that if the user inputs an invalid value, they will be notified with an error message and prompted to re-enter the correct information."}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(t.p,{children:"Here's the list of all the Prompt Fields available in Capture Information Card."}),"\n",(0,r.jsxs)(o.iA,{children:[(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.strong,{children:"Prompt Fields"})}),(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.strong,{children:"Description & Extracted Information"})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.a,{href:"#single-choice",children:"SingleChoice"})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extracts a Single Choice from a finite list of possible Values\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.a,{href:"#multi-choice",children:"MultipleChoice"})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extracts one or multiple choices from a finite list of possible Values\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.a,{href:"#boolean",children:"Boolean"})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extract a Boolean (On/Off) from the Query\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.a,{href:"#confirmation",children:"Confirmation"})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Confirm a Yes/No question with a Boolean from the Query\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.a,{href:"#number",children:"Number"})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extracts a Number from the Query\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.a,{href:"#email-address",children:"EmailAddress"})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extracts a full Email Address from the Query\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.a,{href:"#phone-number",children:"PhoneNumber"})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extracts a Telephone Number and optionally the Country Code from the Query\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.a,{href:"#full-address",children:"FullAddress"})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extract the Full Address from the Query\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.a,{href:"#price",children:"Price"})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extracts a Price from the Query\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.a,{href:"#raw-input",children:"RawInput"})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extract the Input provided by the User, without any processing\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.a,{href:"#percentage",children:"Percentage"})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extracts a Percentage from the Query\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.a,{href:"#quantity",children:"Quantity"})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extract a Quantity from a Query\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.a,{href:"#color",children:"Color"})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extracts a Color as both HEX and RGB codes from the Query\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"#time-measurement",children:"TimeMeasurement"})})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extracts a time measurement as (ns, mu, ms, s, min, h, d, week, month,\nyear) Units\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"#weight-measurement",children:"WeightMeasurement"})})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extracts a Weight Measurement as (mcg, mg, g, kg, oz, lb, mt, t) Units\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.a,{href:"#cron-schedule",children:"CronSchedule"})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extracts a one-time or recurring schedule as a CRON Expression from the\nQuery\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"#operating-system",children:"OperatingSystem"})})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extracts the name of an Operating System (Windows, OSX, IOS, Android,\nLinux)\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"#quantity-of-people",children:"QuantityofPeople"})})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extracts the Number of People in a Query\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"#volume-measurement",children:"VolumeMeasurement"})})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extracts a volume measurement as (mm3, cm3, ml, l, kl, m3, km3, tsp, Tbs,\nin3, fl-oz, cup, pnt, qt, gal, ft3, yd3) Units\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.p,{children:(0,r.jsx)(t.a,{href:"#temperature-measurement",children:"TemperatureMeasurement"})})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extracts a Temperature Measurement as (C, K, F) Units\n",(0,r.jsx)("br",{})," Variable Type: Boolean"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.a,{href:"#person",children:"Person"})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extracts the name of a person(first and last names)\n",(0,r.jsx)("br",{})," Variable Type: Object"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsx)(t.a,{href:"#datetime",children:"DateTime"})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Extracts date and time relative to the current date\n",(0,r.jsx)("br",{})," Variable Type: Object"]})})]})]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(t.p,{children:"Let's understand each prompt field in detail."}),"\n",(0,r.jsx)(t.h3,{id:"single-choice",children:"Single Choice"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"Single Choice"})," is a type of input field that presents the user with a list of options to choose from. The user can only select ",(0,r.jsx)(t.strong,{children:"one"})," option from the list, and their choice is then stored as a value in a variable. This variable can be used later in your workflow for further processing."]}),"\n",(0,r.jsx)(t.p,{children:"An example of Single Choice would be a survey question with multiple options, where the user selects one answer from the list."}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-single-choice-field",children:"Steps to use Single Choice Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"Single Choice"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the selected option."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that lists the available options for the user to choose from."]}),"\n",(0,r.jsxs)(t.li,{children:["Click on the ",(0,r.jsx)(t.strong,{children:"Advanced Configuration"})," to add Choices."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the card is used, it will present the available options to the user and allow them to select only one. The selected option will be saved in the workflow variable you specified, and you can use it in other parts of your workflow to make decisions or take actions based on the user's choice."}),"\n",(0,r.jsx)(t.h4,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to ask the user about their preferred mode of transportation, and you have three options: car, bus, and bike. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Single Choice"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: preferredTransportation"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: What is your preferred mode of transportation? Choose one from the following: car, bus, bike."})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user selects their preferred mode of transportation, the Single Choice card will save the value in the ",(0,r.jsx)(t.strong,{children:"preferredTransportation"})," workflow variable. You can then use this variable to tailor the conversation based on the user's choice."]}),"\n",(0,r.jsx)(t.p,{children:"For example, if they choose bike, you can ask follow-up questions related to biking or suggest some scenic bike routes."}),"\n",(0,r.jsxs)(t.p,{children:["You can also use the value of the ",(0,r.jsx)(t.strong,{children:"preferredTransportation"})," variable in transitions. For example, if the user selects car, you can move them to a node related to car-related services or if they choose bus, you can move them to a node related to public transportation schedules."]}),"\n",(0,r.jsx)(t.h3,{id:"multi-choice",children:"Multi Choice"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"Multi Choice"})," type is a way to gather information from users by presenting them with a list of options to choose from. Users can select one or more options from the list."]}),"\n",(0,r.jsx)(t.p,{children:"This type of capture information is useful in scenarios where you want to give users a set of choices to pick from, like selecting the toppings for a pizza or the colors for a shirt. It's a quick and easy way to collect information from users without having to ask them to type out their answers."}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-multi-choice-field",children:"Steps to use Multi Choice Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"Multi Choice"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted values."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that provides a list of choices for the user to select from."]}),"\n",(0,r.jsxs)(t.li,{children:["Click on the ",(0,r.jsx)(t.strong,{children:"Advanced Configuration"})," to add Choices."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the card is used, it will extract the selected options from the user's input and save them in the workflow variable you specified. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's response."}),"\n",(0,r.jsx)(t.h4,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to ask the user what toppings they want on their pizza. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Multi Choice"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: pizzaToppings"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: What toppings would you like on your pizza? Please select all that apply: pepperoni, mushrooms, onions, olives, sausage."})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters their response, the Multi Choice card will extract the selected options and save them in the ",(0,r.jsx)(t.strong,{children:"pizzaToppings"})," workflow variable. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's response."]}),"\n",(0,r.jsxs)(t.p,{children:["For example, if the user selects ",(0,r.jsx)(t.strong,{children:"pepperoni"})," and ",(0,r.jsx)(t.strong,{children:"mushrooms,"})," you can use the ",(0,r.jsx)(t.strong,{children:"pizzaToppings"})," variable to customise their order and display a message like ",(0,r.jsx)(t.strong,{children:"Your pizza with pepperoni and mushrooms is on the way!"})]}),"\n",(0,r.jsx)(t.h3,{id:"boolean",children:"Boolean"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Boolean"})," type extracts a binary value from the user's input and saves it in a variable of type boolean. The extracted information can include values like true and false, agree and disagree, accept and decline, or any other binary values."]}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-boolean-field",children:"Steps to use Boolean Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"Boolean"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted boolean value."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter a binary value."]}),"\n",(0,r.jsxs)(t.li,{children:["Optionally, you can edit the Choices property if you want to customize the binary values that the user can select. By default, the choices are ",(0,r.jsx)(t.strong,{children:"Yes"})," and ",(0,r.jsx)(t.strong,{children:"No"}),". When the user provides an input, the system will extract either a ",(0,r.jsx)(t.strong,{children:"true"})," or ",(0,r.jsx)(t.strong,{children:"false"})," value based on whether the user selects ",(0,r.jsx)(t.strong,{children:"Yes"})," or ",(0,r.jsx)(t.strong,{children:"No"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.h4,{id:"example-2",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to ask the user if they agree to the terms and conditions of service. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Boolean"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: agreeToTerms"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: Do you agree to the terms and conditions of our service? Please enter 'yes' or 'no'."})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters their response, the Boolean card will extract the binary value and save it in the ",(0,r.jsx)(t.strong,{children:"agreeToTerms"})," workflow variable as either true or false. You can then use this variable in other parts of your workflow to decide whether to proceed with the service or not."]}),"\n",(0,r.jsx)(t.p,{children:"If the user agrees to the terms and conditions, you can submit their request or move them to the next node, but if they disagree, you can say something like 'Sorry to hear that' and end the conversation. This will display a message based on the user's response and whether they agreed to the terms and conditions or not."}),"\n",(0,r.jsx)(t.h3,{id:"confirmation",children:"Confirmation"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"Confirmation"})," type is a way to ask the user to confirm or agree to something. For example, you might use this type to confirm a user's purchase, agreement to terms and conditions, or confirmation of an appointment. When the user responds, the Confirmation type extracts a binary value (either true or false) and saves it in a variable. This allows you to use the user's confirmation or agreement later in your bot's logic."]}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-confirmation-field",children:"Steps to use Confirmation Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"Confirmation"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted boolean value."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to confirm or agree to something."]}),"\n",(0,r.jsxs)(t.li,{children:["Optionally, you can edit the Choices property if you want to customize the binary values that the user can select. By default, the choices are ",(0,r.jsx)(t.strong,{children:"Accept"})," and ",(0,r.jsx)(t.strong,{children:"Decline"}),". When the user provides an input, the system will extract either a ",(0,r.jsx)(t.strong,{children:"true"})," or ",(0,r.jsx)(t.strong,{children:"false"})," value based on whether the user selects ",(0,r.jsx)(t.strong,{children:"Accept"})," or ",(0,r.jsx)(t.strong,{children:"Decline"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the card is used, it will automatically extract the confirmation from the user's input and save it in the workflow variable you specified as a boolean value (true or false). You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's confirmation."}),"\n",(0,r.jsx)(t.h4,{id:"example-3",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to ask the user if they want to proceed with a purchase. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Confirmation"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: proceedWithPurchase"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: Are you sure you want to proceed with the purchase? Please enter 'Accept' or 'Decline'."})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters their response, the Confirmation card will extract the confirmation and save it in the ",(0,r.jsx)(t.strong,{children:"proceedWithPurchase"})," workflow variable as either true or false. You can then use this variable in other parts of your workflow to decide whether to proceed with the purchase or not."]}),"\n",(0,r.jsx)(t.p,{children:"If the user confirms they want to proceed with the purchase, you can move them to the payment process node, but if they decline, you can say something like 'No problem, maybe next time!' and end the conversation. This will display a message based on the user's response and whether they confirmed to proceed with the purchase or not."}),"\n",(0,r.jsx)(t.h3,{id:"number",children:"Number"}),"\n",(0,r.jsxs)(t.p,{children:["The",(0,r.jsx)(t.strong,{children:"Number"})," type extracts a numerical value from the user's input and saves it in a variable of type number."]}),"\n",(0,r.jsx)(t.p,{children:"The user can enter any numerical value, like a whole number or a decimal, and the bot will recognize and store it as a number. This can be used for calculations or any other purpose where a numerical value is needed."}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-number-field",children:"Steps to use Number Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"Number"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted numerical value."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter a numerical value."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the card is used, it will automatically extract the numerical value from the user's input and save it in the workflow variable you specified as a numerical value (integer or decimal). You can then use this variable in other parts of your workflow to perform calculations or take actions based on the user's response."}),"\n",(0,r.jsx)(t.h4,{id:"example-4",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Imagine you are creating an online store that sells products to customers. You want to ask the user to enter the quantity of a certain product they want to purchase. To do this, you can create a form with a field that uses the Number type to capture the user's input."}),"\n",(0,r.jsx)(t.p,{children:"For example, you can create a field with the following details:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Number"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: productQuantity"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: How many units of this product would you like to purchase?"})})]})}),"\n",(0,r.jsx)(t.p,{children:"When the user enters their response, the Number field will extract the numerical value and save it in the productQuantity variable as either an integer or decimal value. You can then use this variable in other parts of your workflow to calculate the total cost of the purchase."}),"\n",(0,r.jsxs)(t.p,{children:["For instance, if the product costs $10 per unit and the user entered ",(0,r.jsx)(t.strong,{children:"3"})," as the product quantity, you can calculate the total cost in an ",(0,r.jsx)(t.a,{href:"../execute-code/",children:"Execute Code Card"})," as follows:"]}),"\n",(0,r.jsx)(t.pre,{"data-language":"html","data-theme":"default",hasCopyCode:!0,children:(0,r.jsx)(t.code,{"data-language":"html","data-theme":"default",children:(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"workflow.totalCost = workflow.productQuantity * $10"})})})}),"\n",(0,r.jsx)(t.p,{children:"This will enable you to calculate the total cost of the purchase based on the user's input and display it to the user before they confirm their order."}),"\n",(0,r.jsx)(t.h3,{id:"email-address",children:"Email Address"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"EmailAddress"})," type is used to extract an email address value from the user's input and save it in a variable of type string. This allows you to use the extracted email address in other parts of your bot's logic, such as sending an email confirmation or storing the email address for future use. The email address can be in any valid email address format, including with special characters such as dots, hyphens, and underscores."]}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-email-address-field",children:"Steps to use Email Address Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"EmailAddress"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted email address value."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter an email address."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the card is used, it will automatically extract the email address value from the user's input and save it in the workflow variable you specified as a string value. You can then use this variable in other parts of your workflow to send emails or perform other actions based on the user's response."}),"\n",(0,r.jsx)(t.h4,{id:"example-5",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to ask the user for their email address so that you can send them a newsletter. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: EmailAddress"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: userEmail"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: Please enter your email address to subscribe to our newsletter."})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters their email address, the EmailAddress card will extract the value and save it in the ",(0,r.jsx)(t.strong,{children:"userEmail"})," workflow variable as a string. You can then use this variable in other parts of your workflow to add the user to your newsletter subscription list or perform other actions based on the user's response."]}),"\n",(0,r.jsx)(t.h3,{id:"phone-number",children:"Phone Number"}),"\n",(0,r.jsxs)(t.p,{children:["In this section, we'll discuss the ",(0,r.jsx)(t.strong,{children:"PhoneNumber"})," capture information type in Botpress. This type of capture information extracts only the phone number representing the user's input, excluding the country code, and saves it in a variable of type string."]}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-phone-number-field",children:"Steps to use Phone Number Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"PhoneNumber"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted phone number value."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter a phone number."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the card is used, it will automatically extract the phone number from the user's input and save it in the workflow variable you specified as a string value. The extracted information will not include the country code, only the digits representing the phone number. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's phone number."}),"\n",(0,r.jsx)(t.h4,{id:"example-6",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to ask the user for their phone number to schedule a call with them. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: PhoneNumber"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: userPhoneNumber"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: Please enter your phone number so we can schedule a call with you."})})]})}),"\n",(0,r.jsx)(t.p,{children:"When the user enters their response, the PhoneNumber card will extract the digits representing the phone number and save it in the userPhoneNumber workflow variable as a string. You can then use this variable in other parts of your workflow to schedule a call with the user."}),"\n",(0,r.jsx)(t.h3,{id:"fulladdress",children:"FullAddress"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"FullAddress"})," extracts the full address information from the user's input and saves it in a variable of type object. The extracted information contains the country, city, street, zip code, and house number."]}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-full-address-field",children:"Steps to use Full Address Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"FullAddress"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted address information."]}),"\n",(0,r.jsxs)(t.li,{children:["Optionally, set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter their address."]}),"\n",(0,r.jsx)(t.li,{children:"Save the card."}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Once the card is saved, it will automatically extract the full address information from the user's input and save it in the workflow variable you specified. You can then use this variable in other parts of your workflow by referencing the specific fields in the address object using the following syntax: ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"{{workflow.variableName.country}}"})}),", ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"{{workflow.variableName.city}}"})}),", ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"{{workflow.variableName.street}}"})}),", ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"{{workflow.variableName.zip}}"})}),", and ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"{{workflow.variableName.number}}"})}),"."]}),"\n",(0,r.jsx)(t.h4,{id:"example-7",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to capture the user's full address to use in a shipping process. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: FullAddress"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: shippingAddress"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: **Please enter your full shipping address:**"})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters their address, the FullAddress card will extract the information and save it in the ",(0,r.jsx)(t.strong,{children:"shippingAddress"})," workflow variable. You can then use this variable in other parts of your workflow to complete the shipping process, such as sending an email confirmation to the user with their shipping details."]}),"\n",(0,r.jsx)(t.p,{children:"Here's an example of how you can use the extracted information in a message:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"html","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"html","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Thank you for your order! Your shipping address is:"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"{{workflow.shippingAddress.number}} {{workflow.shippingAddress.street}},"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"{{workflow.shippingAddress.city}}, {{workflow.shippingAddress.country}},"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"{{workflow.shippingAddress.zip}}"})})]})}),"\n",(0,r.jsx)(t.p,{children:"This will display the user's full address in a clear and easy-to-read format for both the user and the bot."}),"\n",(0,r.jsx)(t.h3,{id:"price",children:"Price"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Price"})," extracts the price information from the user's input and saves it in a variable of type number. The extracted information contains the amount of money, regardless of the currency."]}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-price-field",children:"Steps to use Price Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"Price"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted price information."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter the price."]}),"\n",(0,r.jsxs)(t.li,{children:["Optionally, set the ",(0,r.jsx)(t.strong,{children:"Default value"})," property to a default price to be used if the user doesn't provide one."]}),"\n",(0,r.jsx)(t.li,{children:"Save the card."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the card is saved, it will automatically extract the price information from the user's input and save it in the workflow variable you specified. You can then use this variable in other parts of your workflow to perform calculations or other operations that require the price information."}),"\n",(0,r.jsx)(t.h4,{id:"example-8",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to capture the user's price information to process a payment. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Price"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: paymentAmount"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: Please enter the payment amount:"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Default value: 0.00"})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters the price, the Price card will extract and save the information in the ",(0,r.jsx)(t.strong,{children:"paymentAmount"})," workflow variable. You can then use this variable in other parts of your workflow to process the payment, such as sending the payment information to a payment gateway."]}),"\n",(0,r.jsx)(t.p,{children:"Here's an example of how you can use the extracted information in a message:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"html","data-theme":"default",hasCopyCode:!0,children:(0,r.jsx)(t.code,{"data-language":"html","data-theme":"default",children:(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Your payment amount is {{workflow.paymentAmount}}. Thank you for your payment!"})})})}),"\n",(0,r.jsx)(t.p,{children:"This will display the user's payment amount in a clear and easy-to-read format for both the user and the bot."}),"\n",(0,r.jsx)(t.h3,{id:"raw-input",children:"Raw Input"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"RawInput"})," extracts the user's input as it is and saves it in a variable of type string. The extracted information can include any type of user input, including text, numbers, and special characters."]}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-raw-input-field",children:"Steps to use Raw Input Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"Raw Input"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted user input."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter their input."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the card is used, it will automatically extract the user's input and save it in the workflow variable you specified as a string value. You can then use this variable in other parts of your workflow to process the user's input or display it back to them."}),"\n",(0,r.jsx)(t.h4,{id:"example-9",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want your users to submit an issue for your product. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Raw Input"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: issueDescription"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: Please describe the issue you are experiencing."})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters the issue description, the Raw Input card will extract the user's input and save it in the ",(0,r.jsx)(t.strong,{children:"issueDescription"})," workflow variable as a string value. You can then use this variable in other parts of your workflow to log the issue or escalate it to the relevant team for resolution."]}),"\n",(0,r.jsx)(t.p,{children:"You can create a message node with the following text:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"html","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"html","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Thank you for reporting the issue: {{issueDescription}}. Our team will"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"investigate the issue and get back to you with an update as soon as possible."})})]})}),"\n",(0,r.jsx)(t.p,{children:"This will acknowledge the issue and provide the user with an estimated time frame for resolution."}),"\n",(0,r.jsx)(t.h3,{id:"percentage",children:"Percentage"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"Percentage"})," extracts the decimal representing the percentage the user is using from the user's input and saves it in a variable of type number. The extracted information can include values like 50%, 75%, or any other percentage."]}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-percentage-field",children:"Steps to use Percentage Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"Percentage"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted percentage value."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter a percentage."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the card is used, it will automatically extract the decimal value representing the percentage from the user's input and save it in the workflow variable you specified as a number value. You can then use this variable in other parts of your workflow to make calculations or take actions based on the user's response."}),"\n",(0,r.jsx)(t.h4,{id:"example-10",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to ask the user what percentage discount they would like to apply to their purchase. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Percentage"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: discountPercentage"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: **Please enter the percentage discount you would like to apply to your purchase.**"})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters their response, the Percentage card will extract the decimal value representing the percentage and save it in the ",(0,r.jsx)(t.strong,{children:"discountPercentage"})," workflow variable as a number. You can then use this variable in other parts of your workflow to calculate the discount or take actions based on the user's desired discount."]}),"\n",(0,r.jsx)(t.p,{children:"For example, if the user entered 50%, you could calculate the discount amount as follows:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"html","data-theme":"default",hasCopyCode:!0,children:(0,r.jsx)(t.code,{"data-language":"html","data-theme":"default",children:(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"discountAmount = totalPrice * (discountPercentage / 100)"})})})}),"\n",(0,r.jsx)(t.p,{children:"This will calculate the discount amount based on the user's desired discount percentage and the total price of the purchase."}),"\n",(0,r.jsx)(t.h3,{id:"quantity",children:"Quantity"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"Quantity"}),' extracts the quantity information from the user\'s input and saves it in a variable of type number. For example, if the user inputs "I want to buy 5 apples" or "Give me 5 kilograms of apples", the function will extract the number 5 and store it as a numerical value, without regard to the different units of measurement used. This allows you to work with the quantity of the item, regardless of how the user expressed it.']}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-quantity-field",children:"Steps to use Quantity Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"Quantity"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted quantity information."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter the quantity."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Once the card is saved, it will automatically extract the quantity information from the user's input and save it in the workflow variable you specified. You can then use this variable in other parts of your workflow by referencing it using the following syntax: *",(0,r.jsxs)(t.strong,{children:["*",(0,r.jsx)(t.code,{children:"{{workflow.variableName}}"}),"**"]}),"."]}),"\n",(0,r.jsx)(t.h4,{id:"example-11",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to capture the user's desired quantity of a product. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Quantity"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: productQuantity"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: **How many units of the product do you want?**"})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters a valid quantity, the Quantity card will extract and save the information in the ",(0,r.jsx)(t.strong,{children:"productQuantity"})," workflow variable as a number. You can then use this variable in other parts of your workflow to calculate the total price or to check the stock availability."]}),"\n",(0,r.jsx)(t.p,{children:"Here's an example of how you can use the extracted information in a message:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"html","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"html","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Thank you for your order! Your total price is {{workflow.productQuantity *"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"productPrice}}."})})]})}),"\n",(0,r.jsx)(t.p,{children:"This will display the total price to the user based on the quantity they entered and the price of the product."}),"\n",(0,r.jsx)(t.h3,{id:"color",children:"Color"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"Color"})," type extracts the color information from the user's input and saves it in a variable of type object. The extracted information contains the colour name, hexadecimal code, and RGB values."]}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-color-field",children:"Steps to use Color Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"Color"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted colour information."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter a colour."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Once the card is called will automatically extract the colour information from the user's input and save it in the workflow variable you specified. You can then use this variable in other parts of your workflow by referencing the specific fields in the colour object using the following syntax: ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"{{workflow.variableName.colorName}}"})}),", ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"{{workflow.variableName.hexCode}}"})}),", and ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"{{workflow.variableName.rgb}}"})}),"."]}),"\n",(0,r.jsx)(t.h4,{id:"example-12",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to capture the user's favourite colour to use in a marketing campaign. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Color"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: favoriteColor"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: Please enter your favourite colour:"})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters their favourite colour, the Color card will extract the information and save it in the ",(0,r.jsx)(t.strong,{children:"favoriteColor"})," workflow variable. You can then use this variable in other parts of your workflow to customise your marketing campaigns, such as using the colour in promotional materials or emails."]}),"\n",(0,r.jsx)(t.p,{children:"Here's an example of how you can use the extracted information in a message:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"html","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"html","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Thank you for telling us your favourite colour! We love"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"{{workflow.favoriteColor.colorName}} too. The hexadecimal code for"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"{{workflow.favoriteColor.colorName}} is {{workflow.favoriteColor.hexCode}} and"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"the RGB values are {{workflow.favoriteColor.rgb}}."})})]})}),"\n",(0,r.jsx)(t.p,{children:"This will display the user's favourite colour and its associated information in a personalised message, making the interaction with the bot more engaging and memorable."}),"\n",(0,r.jsx)(t.h3,{id:"time-measurement",children:"Time Measurement"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"TimeMeasurement"})," type extracts date/duration values from the user's input and save it in a variable of type ",(0,r.jsx)(t.strong,{children:"Number"})," after converting it to the chosen format. The extracted information can include values like next week, in a month, after two months, in 15 days, in 2 working days, etc. This information can be useful for scheduling appointments, setting reminders, and much more."]}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-time-measurement-field",children:"Steps to use Time Measurement Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"Time Measurement"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted time measurement value."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter a date/duration value."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the card is used, it will automatically extract the date/duration value from the user's input and save it in the workflow variable you specified as a number value. The time measurement value will be converted to the chosen format (nanoseconds, microseconds, milliseconds, seconds, minutes, hours, days, weeks, months, or years). You can then use this variable in other parts of your workflow to schedule appointments or set reminders."}),"\n",(0,r.jsx)(t.h4,{id:"available-formats",children:"Available Formats"}),"\n",(0,r.jsx)(t.p,{children:"The following formats are available for the extracted time measurement value:"}),"\n",(0,r.jsx)(t.p,{children:"ns (nanoseconds)\nmu (microseconds)\nms (milliseconds)\ns (seconds)\nmin (minutes)\nh (hours)\nd (days)\nweek (weeks)\nmonth (months)\nyear (years)"}),"\n",(0,r.jsx)(t.p,{children:"You can choose any of these formats based on your requirement."}),"\n",(0,r.jsx)(t.h4,{id:"example-13",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to schedule a meeting with a user based on their availability. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Time Measurement"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: meetingTime"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: When are you available for a meeting? Please enter a date or duration (e.g. next week, in 2 days, in 30 minutes)."})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters their response, the Time Measurement card will extract the time measurement value and save it in the ",(0,r.jsx)(t.strong,{children:"meetingTime"})," workflow variable as a number value in the chosen format. You can then use this variable in other parts of your workflow to schedule the meeting accordingly."]}),"\n",(0,r.jsx)(t.p,{children:"If the user is available at the specified time, you can schedule the meeting and confirm the details with the user. If not, you can ask for their availability again."}),"\n",(0,r.jsx)(t.p,{children:"This will allow you to schedule meetings with users based on their availability and improve their experience with your service."}),"\n",(0,r.jsx)(t.h3,{id:"weight-measurement",children:"Weight Measurement"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"WeightMeasurement"})," extracts weight information from the user's input and saves it in a variable of type number after converting it to the chosen format. The available formats are mcg, mg, g, kg, mt, oz, lb, t."]}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-weight-measurement-field",children:"Steps to use Weight Measurement Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"Weight Measurement"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted weight value."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter a weight."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the card is used, it will automatically extract the weight information from the user's input and save it in the workflow variable you specified as a number value. The value is converted to the chosen format which is selected during the configuration of the card. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's response."}),"\n",(0,r.jsx)(t.h4,{id:"available-formats-1",children:"Available Formats"}),"\n",(0,r.jsx)(t.p,{children:"The available weight measurement formats are:"}),"\n",(0,r.jsxs)(o.iA,{children:[(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:"mcg (microgram)"}),(0,r.jsx)(o.Td,{children:"mg (milligram)"}),(0,r.jsx)(o.Td,{children:"g (gram)"}),(0,r.jsx)(o.Td,{children:"kg (kilogram)"})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:"mt (metric ton)"}),(0,r.jsx)(o.Td,{children:"oz (ounce)"}),(0,r.jsx)(o.Td,{children:"lb (pound)"}),(0,r.jsx)(o.Td,{children:"t (ton)"})]})]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(t.h4,{id:"example-14",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to ask the user for their weight in kilograms. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Weight Measurement"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: userWeight"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: Please enter your weight in kilograms."})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters their response, the Weight Measurement card will extract the weight information and convert it to kilograms, saving it in the ",(0,r.jsx)(t.strong,{children:"userWeight"})," workflow variable as a number value. You can then use this variable in other parts of your workflow to decide what to do based on the user's response."]}),"\n",(0,r.jsx)(t.p,{children:"You can ask the user if they want to proceed if their weight is over a certain limit or if it falls under a certain range. You can also display the weight measurement in different formats by using a formatted node."}),"\n",(0,r.jsx)(t.p,{children:"This will display the user's weight in the desired format and provide relevant information based on their response."}),"\n",(0,r.jsx)(t.h3,{id:"cron-schedule",children:"Cron Schedule"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"CronSchedule"})," type takes a specific interval of time that a user inputs and convert it into a format that a computer program can understand. This interval can be things like ",(0,r.jsx)(t.strong,{children:"every 5 minutes"})," or ",(0,r.jsx)(t.strong,{children:"once a day at 3pm."})]}),"\n",(0,r.jsxs)(t.p,{children:["The Cron Schedule then saves this interval in two ways: first, in a format that follows the ",(0,r.jsx)(t.strong,{children:"Cron"}),' convention (which is a standard way of representing time intervals in programming); and second, as a boolean value that indicates whether the interval should be repeated or not (for example, if the interval is "every 5 minutes," the Cron Schedule would set the repeatable property to true, whereas if the interval is "once a day at 3pm," the Cron Schedule would set the repeatable property to false).']}),"\n",(0,r.jsx)(t.p,{children:"This makes it easier for developers to program applications that need to run certain tasks at specific intervals of time."}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-cron-schedule-field",children:"Steps to use Cron Schedule Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"Cron Schedule"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted cron interval."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter the desired interval value."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Once the card is used, it will automatically extract the interval value from the user's input and save it in the workflow variable you specified as an object containing the cron interval and the ",(0,r.jsx)(t.strong,{children:"repeatable"})," boolean value."]}),"\n",(0,r.jsx)(t.h4,{id:"example-15",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to ask the user for a cron schedule to trigger a certain event. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Cron Schedule"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: cronSchedule"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: Please enter the interval in cron format, e.g. '0 \\* \\* \\* \\*' for every hour, and indicate whether this should be repeated or not with 'true' or 'false'."})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters their response, the Cron Schedule card will extract the interval value and save it in the ",(0,r.jsx)(t.strong,{children:"cronSchedule"})," workflow variable as an object with two properties: the ",(0,r.jsx)(t.strong,{children:"cron"})," value, which represents the extracted interval in a cron format, and the ",(0,r.jsx)(t.strong,{children:"repeatable"})," boolean value, which indicates whether the interval should be repeated or not."]}),"\n",(0,r.jsx)(t.p,{children:"You can then use this variable in other parts of your workflow to set up the event trigger according to the user's input."}),"\n",(0,r.jsx)(t.h3,{id:"operating-system",children:"Operating System"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"OperatingSystem"})," type extracts the operating system the user is using from their input and saves it in a variable of type object. This information can be useful for troubleshooting issues specific to certain operating systems or for tailoring responses based on the user's operating system."]}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-operating-system-field",children:"Steps to use Operating System Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"Operating System"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted operating system."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter their operating system."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the card is used, it will automatically extract the operating system from the user's input and save it in the workflow variable you specified as an object. The extracted information can include the name and version of the operating system."}),"\n",(0,r.jsx)(t.h4,{id:"example-16",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to ask the user about the operating system they are using to access your website. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: OperatingSystem"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: userOS"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: **What operating system are you using to access our website?"})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters their response, the Operating System card will extract the information and save it in the ",(0,r.jsx)(t.strong,{children:"userOS"})," workflow variable as an object that includes the name and version of their operating system."]}),"\n",(0,r.jsx)(t.p,{children:"You can then use this variable in other parts of your workflow to tailor responses or troubleshoot issues specific to their operating system."}),"\n",(0,r.jsx)(t.h3,{id:"quantity-of-people",children:"Quantity of People"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"QuantityofPeople"})," type extracts a number representing the quantity of people from the user's input and saves it in a variable of type ",(0,r.jsx)(t.strong,{children:"Number"}),". The extracted information can include values like 1, 2, 3, and so on."]}),"\n",(0,r.jsx)(t.p,{children:"For example, if you are building a reservation system for a restaurant, you can use the QuantityofPeople type to ask the user how many people will be dining, and then save that number as a variable. This variable can then be used to ensure that the restaurant has enough seats available for the group, or to calculate the total cost of the meal based on the number of people."}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-quantity-of-people-field",children:"Steps to use Quantity of People Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"QuantityofPeople"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted number value."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter a number representing the quantity of people."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the card is used, it will automatically extract the number value from the user's input and save it in the workflow variable you specified as a number. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's response."}),"\n",(0,r.jsx)(t.h4,{id:"example-17",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to ask the user how many people will be attending an event. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Quantity Of People"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: numberOfAttendees"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: How many people will be attending the event?"})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters their response, the Quantity Of People card will extract the number value and save it in the ",(0,r.jsx)(t.strong,{children:"numberOfAttendees"})," workflow variable. You can then use this variable in other parts of your workflow to decide how many seats to reserve or how much food to order."]}),"\n",(0,r.jsx)(t.p,{children:"If the user enters a number greater than the available seats or food quantity, you can respond with something like 'Sorry, we don't have enough seats/food for that many people' and ask the user to enter a smaller number."}),"\n",(0,r.jsx)(t.p,{children:"This will display a message based on the user's response and the availability of seats or food."}),"\n",(0,r.jsx)(t.h3,{id:"volume-measurement",children:"Volume Measurement"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"VolumeMeasurement"})," extracts a volume value from the user's input and saves it in a variable of type number. The extracted value can be converted to one of the several available formats based on the user's choice."]}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-volume-measurement-field",children:"Steps to use Volume Measurement Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"VolumeMeasurement"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted volume value."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter a volume value."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the card is used, it will automatically extract the volume value from the user's input and save it in the workflow variable you specified as a number value. You can then use this variable in other parts of your workflow to perform calculations or use the value in responses to the user."}),"\n",(0,r.jsx)(t.h4,{id:"available-formats-2",children:"Available Formats"}),"\n",(0,r.jsx)(t.p,{children:"The following volume formats are available for conversion:"}),"\n",(0,r.jsxs)(o.iA,{children:[(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Cubic millimeters (mm",(0,r.jsx)("sup",{children:"3"}),")"]})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Cubic centimeters (cm",(0,r.jsx)("sup",{children:"3"}),")"]})}),(0,r.jsx)(o.Td,{children:"Milliliters (ml)"}),(0,r.jsx)(o.Td,{children:"Centiliters (cl)"})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:"Deciliters (dl)"}),(0,r.jsx)(o.Td,{children:"Liters (l)"}),(0,r.jsx)(o.Td,{children:"Kiloliters (kl)"}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Cubic meters (m",(0,r.jsx)("sup",{children:"3"}),")"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Cubic kilometers (km",(0,r.jsx)("sup",{children:"3"}),")"]})}),(0,r.jsx)(o.Td,{children:"Teaspoons (tsp)"}),(0,r.jsx)(o.Td,{children:"Tablespoons (Tbs)"}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Cubic inches (in",(0,r.jsx)("sup",{children:"3"}),")"]})})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:"Fluid ounces (fl-oz)"}),(0,r.jsx)(o.Td,{children:"Cups (cup)"}),(0,r.jsx)(o.Td,{children:"Pints (pnt)"}),(0,r.jsx)(o.Td,{children:"Quarts (qt)"})]}),(0,r.jsxs)(o.Tr,{children:[(0,r.jsx)(o.Td,{children:"Gallons (gal)"}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Cubic feet (ft",(0,r.jsx)("sup",{children:"3"}),")"]})}),(0,r.jsx)(o.Td,{children:(0,r.jsxs)(t.p,{children:["Cubic yards (yd",(0,r.jsx)("sup",{children:"3"}),")"]})}),(0,r.jsx)(o.Td,{})]})]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(t.h4,{id:"example-18",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to ask the user about the volume of a liquid they want to order. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: VolumMeasurement"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: liquidVolume"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: What is the volume of liquid you want to order? Please enter a number and choose a volume format from the following list: mm3, cm3, ml, cl, dl, l, kl, m3, km3, tsp, Tbs, in3, fl-oz, cup, pnt, qt, gal, ft3, yd3."})})]})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"Volume Measurement"})," type extracts the volume value and save it in the ",(0,r.jsx)(t.strong,{children:"liquidVolume"})," workflow variable as a number value. The value will be converted to the format specified by the user. You can then use this variable in other parts of your workflow to perform calculations or use the value in responses to the user."]}),"\n",(0,r.jsxs)(t.p,{children:["For example, you could use the ",(0,r.jsx)(t.strong,{children:"liquidVolume"})," variable to calculate the price of the liquid based on the volume and price per unit of volume, or you could use it in response to the user like ",(0,r.jsxs)(t.strong,{children:["Thank you for ordering ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"{{workflow.liquidVolume}}"})})," ml of liquid."]})," Your order will be delivered soon."]}),"\n",(0,r.jsx)(t.h3,{id:"temperature-measurement",children:"Temperature Measurement"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"TemperatureMeasurement"})," type extracts a temperature value from the user's input and saves it in a variable of type ",(0,r.jsx)(t.strong,{children:"Number"}),". The extracted temperature can be in any of the available formats: Celsius, Kelvin, or Fahrenheit."]}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-temperature-measurement-field",children:"Steps to use Temperature Measurement Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"Temperature Measurement"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted temperature value."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter a temperature value in any of the available formats."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the card is used, it will automatically extract the temperature value from the user's input, convert it to the chosen format, and save it in the workflow variable you specified as a number. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's response."}),"\n",(0,r.jsx)(t.h4,{id:"available-formats-3",children:"Available Formats"}),"\n",(0,r.jsxs)(t.p,{children:["There are three temperature formats available in the ",(0,r.jsx)(t.strong,{children:"TemperatureMeasurement"})," capture information type. These are: Celsius (\xb0C), Kelvin (K) & Fahrenheit (\xb0F)"]}),"\n",(0,r.jsx)(t.p,{children:"You can choose the format you want to use in the prompt message property of the capture information card."}),"\n",(0,r.jsx)(t.h4,{id:"example-19",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to ask the user for their body temperature. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: TemperatureMeasurement"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: bodyTemperature"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: Please enter your body temperature in Celsius (\xb0C), Kelvin (K), or Fahrenheit (\xb0F)"})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters their response, the Temperature Measurement card will extract the temperature value, convert it to the specified format, and save it in the ",(0,r.jsx)(t.strong,{children:"bodyTemperature"})," workflow variable as a ",(0,r.jsx)(t.strong,{children:"Number"}),". You can then use this variable in other parts of your workflow to decide what action to take based on the user's body temperature."]}),"\n",(0,r.jsx)(t.p,{children:"If the user's body temperature is higher than the normal range, you can send them to a doctor's appointment node. If not, you can proceed with the conversation as usual."}),"\n",(0,r.jsx)(t.p,{children:"This will display a message based on the user's response and the action you decide to take based on their body temperature."}),"\n",(0,r.jsx)(t.h3,{id:"person",children:"Person"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"Person"})," type is used to extract the name of a person from the user's input, such as when you ask the user for the name of a contact or a customer. Once the user enters the name, the Person type extracts the first and last names and saves them in a variable of type ",(0,r.jsx)(t.strong,{children:"Object"}),"."]}),"\n",(0,r.jsx)(t.p,{children:"This extracted information can be used in other parts of your workflow to personalize messages or perform actions specific to that person, such as sending them an email or adding them to a mailing list."}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-person-field",children:"Steps to use Person Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"Person"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted name information."]}),"\n",(0,r.jsxs)(t.li,{children:["Optionally, set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter their name."]}),"\n",(0,r.jsx)(t.li,{children:"Save the card."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the card is saved, it will automatically extract the person's name information from the user's input and save it in the workflow variable you specified."}),"\n",(0,r.jsx)(t.p,{children:"You can then use this variable in other parts of your workflow by referencing the specific fields in the name object using the following syntax:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"typescript","data-theme":"default",hasCopyCode:!0,children:(0,r.jsx)(t.code,{"data-language":"typescript","data-theme":"default",children:(0,r.jsxs)(t.span,{className:"line",children:[(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"{{"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-constant)"},children:"workflow"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"."}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-constant)"},children:"variableName"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:".first}} and {{"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-constant)"},children:"workflow"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"."}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-constant)"},children:"variableName"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:".last}}"})]})})}),"\n",(0,r.jsx)(t.h4,{id:"example-20",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to capture the user's name to personalise a message. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Person"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: userName"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: What's your name?"})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters their name, the Person card will extract and save the information in the ",(0,r.jsx)(t.strong,{children:"userName"})," workflow variable. You can then use this variable in other parts of your workflow to personalise your messages, such as greeting the user by name."]}),"\n",(0,r.jsx)(t.p,{children:"Here's an example of how you can use the extracted information in a message:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"html","data-theme":"default",hasCopyCode:!0,children:(0,r.jsx)(t.code,{"data-language":"html","data-theme":"default",children:(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Hello {{workflow.userName.first}}, welcome to our website!"})})})}),"\n",(0,r.jsx)(t.p,{children:"This will display a personalised greeting to the user with their first name."}),"\n",(0,r.jsx)(t.h3,{id:"datetime",children:"DateTime"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"DateTime"})," capture information type in Botpress. This type of capture information extracts a date or duration value from the user's input and saves it in a variable of type ",(0,r.jsx)(t.strong,{children:"Object"}),". The extracted information can include values like ",(0,r.jsx)(t.strong,{children:"next week,"})," ",(0,r.jsx)(t.strong,{children:"in a month,"})," ",(0,r.jsx)(t.strong,{children:"after two months,"})," ",(0,r.jsx)(t.strong,{children:"in 15 days,"})," ",(0,r.jsx)(t.strong,{children:"2 working days,"})," or any other date or duration value."]}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-datetime-field",children:"Steps to use DateTime Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"Datetime"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted date or duration value."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter a date or duration value."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the card is used, it will automatically extract the date or duration value from the user's input and save it in the workflow variable you specified as an object. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's response."}),"\n",(0,r.jsx)(t.h4,{id:"example-21",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to ask the user for their preferred date of booking a hotel room. You can create a new capture information card with the following properties:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Datetime"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: bookingDate"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: When would you like to book the room? Please enter a date or duration (e.g., next week, in a month, after two months, in 15 days, 2 working days)."})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters their response, the Datetime card will extract the date or duration value and save it in the ",(0,r.jsx)(t.strong,{children:"bookingDate"})," workflow variable as an object. You can then use this variable in other parts of your workflow to decide when to book the room or provide available dates for the user to choose from."]}),"\n",(0,r.jsx)(t.p,{children:"You can check the user's preferred booking date against your available dates to ensure the room is available for booking on that day. If the room is not available, you can offer other available dates or suggest another hotel that is available on the preferred date."}),"\n",(0,r.jsx)(t.h2,{id:"custom-prompt-fields",children:"Custom Prompt Fields"}),"\n",(0,r.jsx)(t.h3,{id:"entity---regex",children:"Entity - Regex"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"Entity - Regex"})," type of capture information uses regular expressions to extract specific patterns of information from the user's input and saves it in a variable of type ",(0,r.jsx)(t.strong,{children:"String"}),". It's particularly useful for capturing sensitive information like credit card numbers, which have distinct patterns."]}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-regex-field",children:"Steps to use Regex Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Create a new entity in the ",(0,r.jsx)(t.strong,{children:"Entities"})," section of your Botpress instance with a custom regular expression that matches the pattern of the information you want to capture."]}),"\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"Entity Regex"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Select the entity you created in Step 1 from the ",(0,r.jsx)(t.strong,{children:"Entity"})," dropdown."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted information."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter the information you want to capture."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the card is used, it will automatically extract the information that matches the regular expression pattern from the user's input and save it in the workflow variable you specified as a string. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's input."}),"\n",(0,r.jsx)(t.h4,{id:"example-22",children:"Example"}),"\n",(0,r.jsxs)(t.p,{children:["Let's say you want to ask the user for their credit card number. You can create a new entity with a regular expression that matches the pattern of a credit card number, such as ",(0,r.jsxs)(t.strong,{children:["/(\\d",4,"-)",3,"\\d",4,"/"]})," for a 16-digit credit card number in the format ",(0,r.jsx)(t.strong,{children:"XXXX-XXXX-XXXX-XXXX"}),". You can then create a new capture information card with the following properties:"]}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Entity Regex"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Entity: Credit Card Number (the entity you created in step 1)"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: creditCardNumber"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: Please enter your credit card number in the format XXXX-XXXX-XXXX-XXXX."})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters their credit card number, the Entity Regex card will extract the credit card number that matches the regular expression pattern and save it in the ",(0,r.jsx)(t.strong,{children:"creditCardNumber"})," workflow variable as a string. You can then use this variable in other parts of your workflow to perform actions like validating the credit card number or sending it to a payment gateway."]}),"\n",(0,r.jsxs)(t.p,{children:["It's important to note that the ",(0,r.jsx)(t.strong,{children:"Contains sensitive data"})," property is available for Entity Regex type, which will mask the data by * before saving it in the database, making it more secure."]}),"\n",(0,r.jsx)(t.h3,{id:"entity---list",children:"Entity - List"}),"\n",(0,r.jsxs)(t.p,{children:["In this section, we'll discuss the ",(0,r.jsx)(t.strong,{children:"Entity - List"})," capture information type in Botpress. This type of capture information extracts specific pieces of information from the user's input based on matching it with entries (or synonyms) in a custom entity list. This can be useful when you want to capture specific information like a person's name, location, or product name."]}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-list-field",children:"Steps to use List Field"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Create a new entity list under the library -> entities section."}),"\n",(0,r.jsx)(t.li,{children:"Add entries to the entity list and their synonyms."}),"\n",(0,r.jsx)(t.li,{children:"Create a new capture information card."}),"\n",(0,r.jsxs)(t.li,{children:["Set the Type property to ",(0,r.jsx)(t.strong,{children:"Entity List"}),"."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted information."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter information that matches the entity list."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the card is used, it will automatically extract the information that matches an entry (or one of its synonyms) in the custom entity list from the user's input and save it in the workflow variable you specified. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's response."}),"\n",(0,r.jsx)(t.h4,{id:"fuzzy-matching-options",children:"Fuzzy matching options"}),"\n",(0,r.jsx)(t.p,{children:"Botpress offers three options for fuzzy matching:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Strict"}),": No errors allowed."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Medium"}),": Tolerates up to one error in words of four characters or more."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Loose"}),": Tolerates up to two errors in words of four characters or more."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"This means that even if the user makes a typo or a slight error, the system can still match the input with an entry in the entity list."}),"\n",(0,r.jsx)(t.h4,{id:"example-23",children:"Example"}),"\n",(0,r.jsxs)(t.p,{children:["Let's say you want to ask the user for their favorite type of pizza. You can create a new entity list with entries like ",(0,r.jsx)(t.strong,{children:"Pepperoni,"})," ",(0,r.jsx)(t.strong,{children:"Hawaiian,"})," ",(0,r.jsx)(t.strong,{children:"Margherita,"})," and ",(0,r.jsx)(t.strong,{children:"Vegetarian."})," Then, create a new capture information card with the following properties:"]}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Entity List"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: favoritePizza"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: **What's your favorite type of pizza? Please enter the name of one of our popular pizza types."})})]})}),"\n",(0,r.jsxs)(t.p,{children:["When the user enters their response, the Entity List card will extract the information that matches an entry (or synonym) in the custom entity list and save it in the ",(0,r.jsx)(t.strong,{children:"favoritePizza"})," workflow variable. You can then use this variable in other parts of your workflow to make decisions or take actions based on the user's favorite pizza type."]}),"\n",(0,r.jsx)(t.p,{children:"For example, you could use this variable to direct the user to the pizza ordering process, or to suggest additional toppings based on their selection."}),"\n",(0,r.jsx)(t.h2,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,r.jsx)(t.h3,{id:"retries",children:"Retries"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"Retries"})," setting helps the bot handle situations when it doesn't understand what the user is saying. It allows the bot to ask the user to provide the information again in a different way. This can improve the user's experience with the bot, increase engagement, and help the bot handle more conversations before giving up."]}),"\n",(0,r.jsx)(t.h4,{id:"number-of-retries",children:"Number of retries"}),"\n",(0,r.jsx)(t.p,{children:"This is the maximum number of times the bot will ask the user to provide the information again before giving up and sending the conversation to a failure transition."}),"\n",(0,r.jsx)(t.h4,{id:"retry-message",children:"Retry message"}),"\n",(0,r.jsx)(t.p,{children:"This is the message that the bot will show to the user each time they fail to answer the question. It will ask the user to provide the information again in a different way."}),"\n",(0,r.jsx)(t.h4,{id:"pro-tip",children:"Pro Tip"}),"\n",(0,r.jsxs)(t.p,{children:["To give your users the best experience, you can combine the ",(0,r.jsx)(t.strong,{children:"Retries"})," option with the ",(0,r.jsx)(t.strong,{children:"Add transition to handle failure"})," flag. This will help the bot gracefully handle situations when it can't understand the user's input."]}),"\n",(0,r.jsx)(t.h4,{id:"example-1-1",children:"Example 1:"}),"\n",(0,r.jsxs)(t.p,{children:["Let's say you have a card that asks the user to choose between ",(0,r.jsx)(t.strong,{children:"Food"})," and ",(0,r.jsx)(t.strong,{children:"Drinks"}),". If you set the ",(0,r.jsx)(t.strong,{children:"Number of retries"})," to 0 and the ",(0,r.jsx)(t.strong,{children:"Add transition to handle failure"})," flag is turned on, then if the user says ",(0,r.jsx)(t.strong,{children:"I want Cars"}),", the bot will redirect the user directly to the failure transition, where you can show a message like ",(0,r.jsx)(t.strong,{children:"Sorry, I didn't understand that"}),"."]}),"\n",(0,r.jsx)(t.h4,{id:"example-2-1",children:"Example 2:"}),"\n",(0,r.jsxs)(t.p,{children:["Now, let's change the example to have the ",(0,r.jsx)(t.strong,{children:"Number of retries"})," set to 2 and the ",(0,r.jsx)(t.strong,{children:"Retry message"})," set to ",(0,r.jsx)(t.strong,{children:"Sorry, I didn't understand that, try to choose from the choices"}),", and the ",(0,r.jsx)(t.strong,{children:"Add transition to handle failure"})," flag turned on. If the user says, ",(0,r.jsx)(t.strong,{children:"I want Cars"}),", the bot will respond with ",(0,r.jsx)(t.strong,{children:"Sorry, I didn't understand that. Try to choose from the choices"}),", and show the choices again."]}),"\n",(0,r.jsxs)(t.p,{children:["If the user provides another message that is not related to the choices, the bot will retry again, up to a maximum of 2 retries. If the user still fails to provide the required information after the maximum retries, the bot will redirect the user directly to the failure transition, where you can have a message like ",(0,r.jsx)(t.strong,{children:"Sorry, I didn't understand that"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"validation",children:"Validation"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"Validation"})," setting allows you to verify that the user's input meets certain criteria before proceeding with the conversation. This can help ensure that the information collected is accurate and relevant to the conversation."]}),"\n",(0,r.jsx)(t.h4,{id:"properties",children:"Properties"}),"\n",(0,r.jsx)(t.h4,{id:"1-label",children:"1. Label"}),"\n",(0,r.jsx)(t.p,{children:"The label property allows you to generate validation code based on plain natural language instructions. This can make it easier to set up the validation rules without needing to write code."}),"\n",(0,r.jsx)(t.h4,{id:"2-code",children:"2. Code"}),"\n",(0,r.jsx)(t.p,{children:"If you prefer to write your own validation code, you can use the code property. This property allows you to write code to evaluate the user's input and determine whether it meets the validation criteria."}),"\n",(0,r.jsx)(t.h4,{id:"3-validation-failed-message",children:"3. Validation failed message"}),"\n",(0,r.jsx)(t.p,{children:"If the user's input fails validation, you can customise the message that the bot sends to inform the user of the validation failure."}),"\n",(0,r.jsx)(t.h4,{id:"steps-to-use-validation",children:"Steps to use Validation"}),"\n",(0,r.jsx)(t.p,{children:"To use the validation feature, you can add the validation properties to the Capture Information card in the Botpress interface. You can choose to use the Label or Code property to set up the validation rules."}),"\n",(0,r.jsx)(t.p,{children:"Once the validation rules are set up, the user's input will be evaluated before proceeding with the conversation. If the input meets the validation criteria, the conversation will continue normally. If the input fails validation, the bot will send a message with the validation failed message you have specified."}),"\n",(0,r.jsx)(t.h4,{id:"example-1-2",children:"Example 1:"}),"\n",(0,r.jsxs)(t.p,{children:["Suppose you have a Capture Information card that asks the user for their age. You want to ensure that the user enters a number between 18 and 100. You can use the following validation code in the ",(0,r.jsx)(t.strong,{children:"Validation"})," section of the card:"]}),"\n",(0,r.jsx)(t.pre,{"data-language":"javascript","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"javascript","data-theme":"default",children:[(0,r.jsxs)(t.span,{className:"line",children:[(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"function"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-function)"},children:"validate"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"(input"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-constant)"},children:"string"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:")"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-constant)"},children:"boolean"})]}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"{"})}),"\n",(0,r.jsxs)(t.span,{className:"line",children:[(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"  "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"const"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-constant)"},children:"age"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-function)"},children:"parseInt"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"(input) "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-function)"},children:"if"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" ("}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-function)"},children:"isNaN"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"(age))"})]}),"\n",(0,r.jsxs)(t.span,{className:"line",children:[(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"  { "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"return"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-constant)"},children:"false"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" }"})]}),"\n",(0,r.jsxs)(t.span,{className:"line",children:[(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"  "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"return"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" age "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:">="}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-constant)"},children:"18"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"&&"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" age "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"<="}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-constant)"},children:"100"})]}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,r.jsxs)(t.p,{children:["This code first tries to parse the user's input as a number. If the input is not a valid number, the code returns ",(0,r.jsx)(t.strong,{children:"false"}),". Otherwise, it checks if the age is between 18 and 100 and returns ",(0,r.jsx)(t.strong,{children:"true"})," if it is."]}),"\n",(0,r.jsx)(t.h4,{id:"example-2-2",children:"Example 2:"}),"\n",(0,r.jsxs)(t.p,{children:["Suppose you have a Capture Information card that asks the user for their email address. You want to ensure that the user enters a valid email address format. You can use the following validation code in the ",(0,r.jsx)(t.strong,{children:"Validation"})," section of the card:"]}),"\n",(0,r.jsx)(t.pre,{"data-language":"typescript","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"typescript","data-theme":"default",children:[(0,r.jsxs)(t.span,{className:"line",children:[(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"function"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-function)"},children:"validate"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"(input"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-constant)"},children:"string"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:")"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:":"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-constant)"},children:"boolean"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" {"})]}),"\n",(0,r.jsxs)(t.span,{className:"line",children:[(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"  "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"const"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-constant)"},children:"emailRegex"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-string-expression)"},children:" /"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"^"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-string-expression)"},children:"["}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"^"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-string-expression)"},children:"\\s@]"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"+"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-string-expression)"},children:"@["}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"^"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-string-expression)"},children:"\\s@]"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"+"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-string-expression)"},children:"\\.["}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"^"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-string-expression)"},children:"\\s@]"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"+$"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-string-expression)"},children:"/"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:";"})]}),"\n",(0,r.jsxs)(t.span,{className:"line",children:[(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"  "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"return"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" "}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-constant)"},children:"emailRegex"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-token-function)"},children:".test"}),(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"(input);"})]}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"}"})})]})}),"\n",(0,r.jsxs)(t.p,{children:["This code uses a regular expression to check if the user's input matches the format of a valid email address. If the input matches the format, the code returns ",(0,r.jsx)(t.code,{children:"true"}),". Otherwise, it returns ",(0,r.jsx)(t.code,{children:"false"}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"extract-from-history",children:"Extract from History"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"Extract from History"})," setting allows the bot to extract values from previous messages in the conversation history. This can help the bot better understand the user's input and provide more accurate responses."]}),"\n",(0,r.jsx)(t.h4,{id:"property",children:"Property"}),"\n",(0,r.jsx)(t.h4,{id:"number-of-messages-from-history-to-extract-from",children:"Number of messages from history to extract from"}),"\n",(0,r.jsxs)(t.p,{children:["This property determines how many messages in the conversation history the bot will try to extract the value from. A value of ",(0,r.jsx)(t.strong,{children:"0"})," means that the bot will not look back in the conversation history and will only use the user's most recent message. A value of ",(0,r.jsx)(t.strong,{children:"1"})," means that the bot will extract the value from the user's previous message, and so on."]}),"\n",(0,r.jsx)(t.h4,{id:"example-24",children:"Example:"}),"\n",(0,r.jsxs)(t.p,{children:["Let's say you have a Capture Information card that asks the user for their favorite color. If the user has already mentioned their favorite color earlier in the conversation, you can use the ",(0,r.jsx)(t.strong,{children:"Extract from History"})," feature to extract the value from their previous message."]}),"\n",(0,r.jsxs)(t.p,{children:["If you set the ",(0,r.jsx)(t.strong,{children:"Number of messages from history to extract from"})," to ",(0,r.jsx)(t.strong,{children:"1"}),", the bot will extract the value from the user's previous message. If you set it to ",(0,r.jsx)(t.strong,{children:"2"}),", the bot will extract the value from the message before that, and so on."]}),"\n",(0,r.jsxs)(t.p,{children:["For example, if the user said ",(0,r.jsx)(t.strong,{children:"My favorite color is blue"})," earlier in the conversation and you set the ",(0,r.jsx)(t.strong,{children:"Number of messages from history to extract from"})," to ",(0,r.jsx)(t.strong,{children:"1"}),", the bot will extract ",(0,r.jsx)(t.strong,{children:"blue"})," as the user's favorite color without asking the user again. This can save time and improve the user experience by avoiding repetitive questions."]}),"\n",(0,r.jsx)(t.h3,{id:"cancellation",children:"Cancellation"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"Cancellation"})," setting can be used to break out of the conversation and cancel the Capture Information card. This can enhance the user's experience with the bot, making the conversation feel more natural and increasing engagement."]}),"\n",(0,r.jsx)(t.h4,{id:"properties-1",children:"Properties"}),"\n",(0,r.jsx)(t.h4,{id:"user-can-cancel-the-capture",children:"User can cancel the capture"}),"\n",(0,r.jsx)(t.p,{children:"With this option turned on, users can cancel the Capture Information card at any time during the conversation."}),"\n",(0,r.jsx)(t.h4,{id:"confirm-before-cancelling",children:"Confirm before cancelling"}),"\n",(0,r.jsx)(t.p,{children:"If you turn on this option, users will be asked to confirm whether they want to cancel the Capture Information card before it is cancelled."}),"\n",(0,r.jsx)(t.h4,{id:"confirm-cancel-message",children:"Confirm cancel message"}),"\n",(0,r.jsx)(t.p,{children:"This option allows you to customise the message that the bot sends to confirm the user's decision to cancel the Capture Information card."}),"\n",(0,r.jsx)(t.h4,{id:"example-1-3",children:"Example 1:"}),"\n",(0,r.jsxs)(t.p,{children:["Suppose you have a Capture Information card that asks the user for their name and email address. If the user decides to cancel the conversation, the ",(0,r.jsx)(t.strong,{children:"User can cancel the capture"})," option will allow them to do so easily."]}),"\n",(0,r.jsx)(t.h4,{id:"example-2-3",children:"Example 2:"}),"\n",(0,r.jsxs)(t.p,{children:["If you turn on the ",(0,r.jsx)(t.strong,{children:"Confirm before cancelling"})," option, the bot will ask the user if they are sure they want to cancel the Capture Information card before it is cancelled. If the user confirms the cancellation, the bot will send a message that you can customise using the ",(0,r.jsx)(t.strong,{children:"Confirm cancel message"})," option."]}),"\n",(0,r.jsx)(t.h3,{id:"choices",children:"Choices"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"Choices"})," setting is used to offer a list of predefined options to the user as a response to a Capture Information card. This can be useful when you want to restrict the user's input to a specific set of values."]}),"\n",(0,r.jsx)(i.UW,{children:(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Tip"})," ",(0,r.jsx)("br",{}),"\nChoices are only available for ",(0,r.jsx)(t.strong,{children:"Single Choice"})," & ",(0,r.jsx)(t.strong,{children:"Multi Choice"})," Prompt\ntypes."]})}),"\n",(0,r.jsx)(t.h4,{id:"example-25",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Suppose you have a Capture Information card that asks the user to select their preferred mode of transportation - Car, Bus or Train. If you turn on the Choices option and specify these three options, the user will be presented with these options to choose from."}),"\n",(0,r.jsx)(t.h3,{id:"advanced",children:"Advanced"}),"\n",(0,r.jsx)(t.h4,{id:"1-add-transition-to-handle-failure",children:"1. Add transition to handle failure"}),"\n",(0,r.jsx)(t.p,{children:"This is a yes/no flag that determines whether a transition should be added to handle cases where the Capture Information card fails to retrieve information from the user."}),"\n",(0,r.jsx)(t.h4,{id:"example-26",children:"Example"}),"\n",(0,r.jsxs)(t.p,{children:["If this flag is set to ",(0,r.jsx)(t.strong,{children:"Yes"})," and the Capture Information card fails to capture the required information, it will transition to the failure transition where a message can be displayed to the user, such as ",(0,r.jsx)(t.strong,{children:"Sorry, I didn't understand that. Please try again"}),"."]}),"\n",(0,r.jsx)(t.h4,{id:"2-skip-if-variable-is-already-filled",children:"2. Skip if variable is already filled"}),"\n",(0,r.jsx)(t.p,{children:"This is a flag that determines whether the Capture Information card should be skipped if the variable assigned to it already has a value."}),"\n",(0,r.jsx)(t.h4,{id:"example-27",children:"Example"}),"\n",(0,r.jsxs)(t.p,{children:["If this flag is set to ",(0,r.jsx)(t.strong,{children:"Yes"})," and the variable already has a value, the Capture Information card will be skipped entirely, and the conversation will proceed to the next node."]}),"\n",(0,r.jsx)(t.p,{children:"This flag can be useful in scenarios where a user may have already provided the required information in a previous conversation with the bot."}),"\n",(0,r.jsx)(t.p,{children:"Combining these two flags can help improve the user experience with the bot by allowing for smoother conversation flows and avoiding unnecessary repetition."}),"\n",(0,r.jsx)(t.h2,{id:"prompt-chaining",children:"Prompt Chaining"}),"\n",(0,r.jsx)(t.p,{children:"Prompt Chaining allows you to extract multiple values from a single user message using multiple Capture Information cards in sequence. If a value was not found, the respective Capture Information card will ask for its value."}),"\n",(0,r.jsx)(t.h3,{id:"chaining-multiple-prompts",children:"Chaining Multiple Prompts"}),"\n",(0,r.jsx)(t.p,{children:"To chain multiple Capture Information cards together, you need to follow these steps:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Add the first Capture Information card to the flow."}),"\n",(0,r.jsx)(t.li,{children:"Set the Type property to the type of information you want to capture (e.g., Fullname)."}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Variable name"})," property to the name of the workflow variable you want to use to store the extracted information (e.g., fullname)."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Prompt message"})," property to a message that prompts the user to enter the information (e.g., ",(0,r.jsx)(t.strong,{children:"Please enter your full name"}),")."]}),"\n",(0,r.jsxs)(t.li,{children:["Set the ",(0,r.jsx)(t.strong,{children:"Extract from history"})," property to ",(0,r.jsx)(t.strong,{children:"1"}),"."]}),"\n",(0,r.jsx)(t.li,{children:"Add the next Capture Information card to the flow."}),"\n",(0,r.jsx)(t.li,{children:"Repeat steps 1-6 for each additional Capture Information card you want to add, making sure to use a different variable name for each one."}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Once the user enters a value, it will automatically extract the requested information from the user's message using each Capture Information card in sequence. If a value is not found for a particular Capture Information card, it will ask the user for the value before proceeding to the next node/card."}),"\n",(0,r.jsxs)(t.p,{children:["You can then use the extracted variables in other parts of your flow by referencing the specific variable names using the following syntax: ",(0,r.jsx)(t.strong,{children:(0,r.jsx)(t.code,{children:"{{workflow.variableName}}"})}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"example-28",children:"Example"}),"\n",(0,r.jsx)(t.p,{children:"Let's say you want to capture a user's full name, email address, and phone number. You can create a new flow with the following steps:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"Add a Capture Information card to the flow with the following properties:"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Fullname"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: fullname"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: Please enter your full name"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Extract from history: 1"})})]})}),"\n",(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsx)(t.li,{children:"Add a second Capture Information card to the flow with the following properties:"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: Email"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: email"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: Please enter your email address"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Extract from history: 1"})})]})}),"\n",(0,r.jsxs)(t.ol,{start:"3",children:["\n",(0,r.jsx)(t.li,{children:"Add a third Capture Information card to the flow with the following properties:"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Type: PhoneNumber"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Variable name: phone"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Prompt message: Please enter your phone number"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Extract from history: 1"})})]})}),"\n",(0,r.jsx)(t.p,{children:"When the user sends a message, the flow will begin extracting the requested information from the user's message using each Capture Information card in sequence. If a value is not found for a particular Capture Information card, it will ask the user for the value before proceeding to the next card."}),"\n",(0,r.jsx)(t.p,{children:"You can then use the extracted variables in other parts of your flow, such as sending a confirmation message to the user with their captured information:"}),"\n",(0,r.jsx)(t.pre,{"data-language":"text","data-theme":"default",hasCopyCode:!0,children:(0,r.jsxs)(t.code,{"data-language":"text","data-theme":"default",children:[(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"Thank you for submitting your information!"})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"We have your full name as {{workflow.fullname.first}} {{workflow.fullname.last}}, your email address as {{workflow.email}}, and your phone number as {{workflow.phone}}."})}),"\n",(0,r.jsx)(t.span,{className:"line",children:(0,r.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"We'll be in touch soon!"})})]})}),"\n",(0,r.jsx)(t.p,{children:"This will display the user's captured information in a clear and easy-to-read format for both the user and the bot."})]})}t.default=(0,a.j)({MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,n.ah)(),e.components);return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)},pageOpts:{filePath:"pages/cloud/toolbox/capture-information.mdx",route:"/cloud/toolbox/capture-information",headings:[{depth:1,value:'Capture Information"',id:"capture-information"},{depth:2,value:"Prompt Field Types",id:"prompt-field-types"},{depth:3,value:"Single Choice",id:"single-choice"},{depth:4,value:"Steps to use Single Choice Field",id:"steps-to-use-single-choice-field"},{depth:4,value:"Example",id:"example"},{depth:3,value:"Multi Choice",id:"multi-choice"},{depth:4,value:"Steps to use Multi Choice Field",id:"steps-to-use-multi-choice-field"},{depth:4,value:"Example",id:"example-1"},{depth:3,value:"Boolean",id:"boolean"},{depth:4,value:"Steps to use Boolean Field",id:"steps-to-use-boolean-field"},{depth:4,value:"Example",id:"example-2"},{depth:3,value:"Confirmation",id:"confirmation"},{depth:4,value:"Steps to use Confirmation Field",id:"steps-to-use-confirmation-field"},{depth:4,value:"Example",id:"example-3"},{depth:3,value:"Number",id:"number"},{depth:4,value:"Steps to use Number Field",id:"steps-to-use-number-field"},{depth:4,value:"Example",id:"example-4"},{depth:3,value:"Email Address",id:"email-address"},{depth:4,value:"Steps to use Email Address Field",id:"steps-to-use-email-address-field"},{depth:4,value:"Example",id:"example-5"},{depth:3,value:"Phone Number",id:"phone-number"},{depth:4,value:"Steps to use Phone Number Field",id:"steps-to-use-phone-number-field"},{depth:4,value:"Example",id:"example-6"},{depth:3,value:"FullAddress",id:"fulladdress"},{depth:4,value:"Steps to use Full Address Field",id:"steps-to-use-full-address-field"},{depth:4,value:"Example",id:"example-7"},{depth:3,value:"Price",id:"price"},{depth:4,value:"Steps to use Price Field",id:"steps-to-use-price-field"},{depth:4,value:"Example",id:"example-8"},{depth:3,value:"Raw Input",id:"raw-input"},{depth:4,value:"Steps to use Raw Input Field",id:"steps-to-use-raw-input-field"},{depth:4,value:"Example",id:"example-9"},{depth:3,value:"Percentage",id:"percentage"},{depth:4,value:"Steps to use Percentage Field",id:"steps-to-use-percentage-field"},{depth:4,value:"Example",id:"example-10"},{depth:3,value:"Quantity",id:"quantity"},{depth:4,value:"Steps to use Quantity Field",id:"steps-to-use-quantity-field"},{depth:4,value:"Example",id:"example-11"},{depth:3,value:"Color",id:"color"},{depth:4,value:"Steps to use Color Field",id:"steps-to-use-color-field"},{depth:4,value:"Example",id:"example-12"},{depth:3,value:"Time Measurement",id:"time-measurement"},{depth:4,value:"Steps to use Time Measurement Field",id:"steps-to-use-time-measurement-field"},{depth:4,value:"Available Formats",id:"available-formats"},{depth:4,value:"Example",id:"example-13"},{depth:3,value:"Weight Measurement",id:"weight-measurement"},{depth:4,value:"Steps to use Weight Measurement Field",id:"steps-to-use-weight-measurement-field"},{depth:4,value:"Available Formats",id:"available-formats-1"},{depth:4,value:"Example",id:"example-14"},{depth:3,value:"Cron Schedule",id:"cron-schedule"},{depth:4,value:"Steps to use Cron Schedule Field",id:"steps-to-use-cron-schedule-field"},{depth:4,value:"Example",id:"example-15"},{depth:3,value:"Operating System",id:"operating-system"},{depth:4,value:"Steps to use Operating System Field",id:"steps-to-use-operating-system-field"},{depth:4,value:"Example",id:"example-16"},{depth:3,value:"Quantity of People",id:"quantity-of-people"},{depth:4,value:"Steps to use Quantity of People Field",id:"steps-to-use-quantity-of-people-field"},{depth:4,value:"Example",id:"example-17"},{depth:3,value:"Volume Measurement",id:"volume-measurement"},{depth:4,value:"Steps to use Volume Measurement Field",id:"steps-to-use-volume-measurement-field"},{depth:4,value:"Available Formats",id:"available-formats-2"},{depth:4,value:"Example",id:"example-18"},{depth:3,value:"Temperature Measurement",id:"temperature-measurement"},{depth:4,value:"Steps to use Temperature Measurement Field",id:"steps-to-use-temperature-measurement-field"},{depth:4,value:"Available Formats",id:"available-formats-3"},{depth:4,value:"Example",id:"example-19"},{depth:3,value:"Person",id:"person"},{depth:4,value:"Steps to use Person Field",id:"steps-to-use-person-field"},{depth:4,value:"Example",id:"example-20"},{depth:3,value:"DateTime",id:"datetime"},{depth:4,value:"Steps to use DateTime Field",id:"steps-to-use-datetime-field"},{depth:4,value:"Example",id:"example-21"},{depth:2,value:"Custom Prompt Fields",id:"custom-prompt-fields"},{depth:3,value:"Entity - Regex",id:"entity---regex"},{depth:4,value:"Steps to use Regex Field",id:"steps-to-use-regex-field"},{depth:4,value:"Example",id:"example-22"},{depth:3,value:"Entity - List",id:"entity---list"},{depth:4,value:"Steps to use List Field",id:"steps-to-use-list-field"},{depth:4,value:"Fuzzy matching options",id:"fuzzy-matching-options"},{depth:4,value:"Example",id:"example-23"},{depth:2,value:"Advanced Configuration",id:"advanced-configuration"},{depth:3,value:"Retries",id:"retries"},{depth:4,value:"Number of retries",id:"number-of-retries"},{depth:4,value:"Retry message",id:"retry-message"},{depth:4,value:"Pro Tip",id:"pro-tip"},{depth:4,value:"Example 1:",id:"example-1-1"},{depth:4,value:"Example 2:",id:"example-2-1"},{depth:3,value:"Validation",id:"validation"},{depth:4,value:"Properties",id:"properties"},{depth:4,value:"1. Label",id:"1-label"},{depth:4,value:"2. Code",id:"2-code"},{depth:4,value:"3. Validation failed message",id:"3-validation-failed-message"},{depth:4,value:"Steps to use Validation",id:"steps-to-use-validation"},{depth:4,value:"Example 1:",id:"example-1-2"},{depth:4,value:"Example 2:",id:"example-2-2"},{depth:3,value:"Extract from History",id:"extract-from-history"},{depth:4,value:"Property",id:"property"},{depth:4,value:"Number of messages from history to extract from",id:"number-of-messages-from-history-to-extract-from"},{depth:4,value:"Example:",id:"example-24"},{depth:3,value:"Cancellation",id:"cancellation"},{depth:4,value:"Properties",id:"properties-1"},{depth:4,value:"User can cancel the capture",id:"user-can-cancel-the-capture"},{depth:4,value:"Confirm before cancelling",id:"confirm-before-cancelling"},{depth:4,value:"Confirm cancel message",id:"confirm-cancel-message"},{depth:4,value:"Example 1:",id:"example-1-3"},{depth:4,value:"Example 2:",id:"example-2-3"},{depth:3,value:"Choices",id:"choices"},{depth:4,value:"Example",id:"example-25"},{depth:3,value:"Advanced",id:"advanced"},{depth:4,value:"1. Add transition to handle failure",id:"1-add-transition-to-handle-failure"},{depth:4,value:"Example",id:"example-26"},{depth:4,value:"2. Skip if variable is already filled",id:"2-skip-if-variable-is-already-filled"},{depth:4,value:"Example",id:"example-27"},{depth:2,value:"Prompt Chaining",id:"prompt-chaining"},{depth:3,value:"Chaining Multiple Prompts",id:"chaining-multiple-prompts"},{depth:3,value:"Example",id:"example-28"}],timestamp:1687979724e3,title:'Capture Information"'},pageNextRoute:"/cloud/toolbox/capture-information"})}},function(e){e.O(0,[452,9774,2888,179],function(){return e(e.s=795)}),_N_E=e.O()}]);